sample(1:10)
1:10
sample(1:10)
sample(1:10)
sample(1:10)
1:10
hat_match <- function(n=10){
sample0 <- sample(1:n)
matches <- sample0(sample0 == 1:n)
return(matches)
}
hat_match(10)
hat_match <- function(n=10){
sample0 <- sample(1:n)
matches <- sample(sample0 == 1:n)
return(matches)
}
hat_match(10)
hat_match <- function(n=10){
sample0 <- sample(1:n)
matches <- sample[sample0 == 1:n]
return(matches)
}
hat_match(10)
hat_match <- function(n=10){
sample0 <- sample(1:n)
matches <- sample0[sample0 == 1:n]
return(matches)
}
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match <- function(n=10){
sample0 <- sample(1:n)
matches <- sample0[sample0 == 1:n].length
return(matches)
}
#HatProblem
sample(1:10)
hat_match <- function(n=10){
sample0 <- sample(1:n)
matches <- length(sample0[sample0 == 1:n])
return(matches)
}
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
#HatProblem
sample(1:10)
hat_match <- function(n=10){
sample0 <- sample(1:n)
matches <- length(sample0[sample0 == 1:n])
return(matches)
}
hat_match(10)
hat_match(10)
hat_match(10)
#HatProblem
#sample(1:10)
hat_match <- function(n=10){
sample0 <- sample(1:n)
#matches <- length(sample0[sample0 == 1:n])
matches <- sum(sample0 == 1:n)
return(matches)
}
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
replicate(1000,hat_match)
replicate(1000,hat_match())
table(replicate(1000,hat_match()))
#HatProblem
#sample(1:10)
hat_match <- function(n=10){
sample0 <- sample(1:n)
#matches <- length(sample0[sample0 == 1:n])
matches <- sum(sample0 == 1:n)
return(matches)
}
replicate(1000,hat_match())
hat_match_none <- function(n1=10,n2=10){
sample_none <- replicate(n1,hat_match(n2))
return(sum(sample_none == 0))
}
hat_match_none()
hat_match_none()
trials <- sapply(1:25,hat_match_none)
trials
trials <- sapply(1:25,hat_match_none,1000)
trials
trials <- sapply(1:25,hat_match_none,10000)
plot(1:25,trials)
trials <- sapply(1:21,hat_match_none,10000)
plot(1:21,trials)
hat_match_none(20)
hat_match_none <- function(n1=10,n2=10){
sample_none <- replicate(n2,hat_match(n1))
return(sum(sample_none == 0)/10000)
}
trials <- sapply(1:21,hat_match_none,10000)
plot(1:21,trials)
hat_match_none(20)
abline(hat_match_none(20))
abline(h=hat_match_none(20))
abline(h=hat_match_none(20))
abline(h=hat_match_none(20))
abline(h=hat_match_none(20))
abline(h=hat_match_none(20))
abline(h=hat_match_none(20))
abline(h=hat_match_none(20))
plot(1:21,trials)
abline(h=hat_match_none(20))
sample(rep(c(1:2),5))
rep(c(1:2),5)
rep(c(1:2),c(5,5)
)
sample(rep(c(1:2),c(5,5)))
hat_match_duo <- function(n=2){
sample0 <- sample(c(1,2),1:n)
#matches <- length(sample0[sample0 == 1:n])
matches <- sum(sample0 == 1:n)
return(matches)
}
sample(rep(c(1:2),1:5)
)
sample(rep(c(1:2),1:5))
sample(rep(c(1:2),1:2))
rep(c(1:2),c(10,10)
)
View(hat_match_duo)
View(hat_match_duo)
function(n=2){
sample0 <- sample(c(1,2),c(n,n))
#matches <- length(sample0[sample0 == c(n,n)])
matches <- sum(sample0 == c(n,n))
return(matches)
}
hat_match_duo <- function(n=2){
sample0 <- sample(c(1,2),c(n,n))
#matches <- length(sample0[sample0 == c(n,n)])
matches <- sum(sample0 == c(n,n))
return(matches)
}
hat_match_duo(3)
rep(1,3)
hat_match_duo <- function(n=2){
sample0 <- sample(c(rep(1,n),rep(2,n)))
#matches <- length(sample0[sample0 == c(n,n)])
matches <- sum(sample0 == c(n,n))
return(matches)
}
hat_match_duo(3)
hat_match_duo(3)
hat_match_duo(3)
hat_match_duo(3)
hat_match_duo(3)
hat_match_duo(3)
hat_match_duo(3)
hat_match_duo <- function(n=2){
sample0 <- sample(c(rep(1,n),rep(2,n)))
#matches <- length(sample0[sample0 == c(n,n)])
matches <- sum(sample0 == c(n,n))
return(matches)
}
c(rep(1,n),rep(2,n))
n=10
c(rep(1,n),rep(2,n))
hat_match_duo <- function(n=2){
sample0 <- sample(c(rep(1,n),rep(2,n)))
#matches <- length(sample0[sample0 == c(rep(1,n),rep(2,n))])
matches <- sum(sample0 == c(rep(1,n),rep(2,n)))
return(matches)
}
c(rep(1,n),rep(2,n))
matches <- replicate(1000,hat_match_duo())
matches
table(matches)
View(hat_match_duo)
sample(c(rep(1,n),rep(2,n)))
c(rep(1,n),rep(2,n))
sample0 == c(rep(1,n),rep(2,n))
sample(c(rep(1,n),rep(2,n))) == c(rep(1,n),rep(2,n))
n
matches <- replicate(1000,hat_match_duo(10))
table(matches)
matches <- replicate(1000,hat_match_duo(10))
table(matches)
matches <- replicate(1000,hat_match_duo(10))
table(matches)
331+254+87+6
mean(matches)
mean(matches >= 10)
hist(matches)
save.image("~/MonteCarloWorkSpace.RData")
install.packages("mclust")
library(mclust)
View(diabetes)
?BASE
??base
base(c)
compute_w <- function(X, Y, phi) {
Phi <- sapply(phi, function(base) base(X))  # make design matrix
solve(t(Phi) %*% Phi) %*% t(Phi) %*% Y      # find maximum likelihood
}
# some basis egs
one <- function(x) rep(1,length(x))
id  <- function(x) x
sq  <- function(x) x^2
x3  <- function(x) x^3
x4  <- function(x) x^4
And letâ€™s apply this to some egs. First to the standard linear regression:
# some data
X <- c(1,2,3,5,7)
Y <- c(3,5,6,12,21)
# basis for linear regression
phi <- c(one, id)
W <- compute_w(X, Y, phi)
W
# some basis egs
one <- function(x) rep(1,length(x))
id  <- function(x) x
sq  <- function(x) x^2
x3  <- function(x) x^3
x4  <- function(x) x^4
# some data
X <- c(1,2,3,5,7)
Y <- c(3,5,6,12,21)
# basis for linear regression
phi <- c(one, id)
W <- compute_w(X, Y, phi)
W
??points
m <- sapply(phi,function(base) base(xs))
xs     <- seq(min(X),max(X),len=50)
xs
m <- sapply(phi,function(base) base(xs))
m
source('~/PMRL-R-Workspace/Linear Basis Models.R')
source('~/PMRL-R-Workspace/Linear Basis Models.R')
source('~/PMRL-R-Workspace/Linear Basis Models.R')
source('~/PMRL-R-Workspace/Linear Basis Models.R')
source('~/PMRL-R-Workspace/Linear Basis Models.R')
source('~/PMRL-R-Workspace/Linear Basis Models.R')
source('~/PMRL-R-Workspace/Linear Basis Models.R')
# basis for quadratic regression
phi <- c(one, id, sq)
W <- compute_w(X, Y, phi)
plot(X,Y,pch=19)
draw_regression(X,W,phi)
draw_regression(X,W,phi)
phi <- c(one, id, function(x) sin(x))
W <- compute_w(X, Y, phi)
plot(X,Y,pch=19)
draw_regression(X,W,phi)
?plot
?abline
source('~/PMRL-R-Workspace/Linear Basis Models-Regularization.R')
source('~/PMRL-R-Workspace/Linear Basis Models-Regularization.R')
?plot
source('~/PMRL-R-Workspace/Linear Basis Models-Regularization.R')
source('~/PMRL-R-Workspace/Linear Basis Models-Regularization.R')
#----------------------------------------------------------
#----------------Linear Basis Models Sequential Learning---
source('~/PMRL-R-Workspace/Linear Basis Models-Sequential.R')
source('~/PMRL-R-Workspace/Linear Basis Models-Sequential.R')
source('~/PMRL-R-Workspace/Linear Basis Models-Sequential.R')
sigmoid <- function(x) { 1/(1+exp(-x)) }
curve(sigmoid, -5, 5, col="red", lwd=2)
X <- data[,1:2]
#----------------Probabilistic Generative Models-----------
# Refer:
#    Probabilistic Generative Models
#----------------------------------------------------------
#--------Probabilistic Generative Models ------------------
load("data.RData")
setwd("~/PMRL-R-Workspace/Chapter 4")
#----------------Probabilistic Generative Models-----------
# Refer:
#    Probabilistic Generative Models
#----------------------------------------------------------
#--------Probabilistic Generative Models ------------------
load("data.RData")
source('~/PMRL-R-Workspace/Chapter 4/Probabilistic Generative Models.R')
X <- data[,1:2]
Y <- data[,3]
# get maximum likelihood estimates
mus   <- mle_mus(X,Y)
Sigma <- mle_Sigma(X,Y,mus)
# define equal priors for C_1 and C_2
priors <- c(0.5,0.5)
{ get_posteriors(x, priors, mus, Sigma) }
classifier <- function(x) { get_posteriors(x, priors, mus, Sigma) }
X_new <- matrix(c(4.0,5.0,
6.0,3.0,
5.3,4.5), ncol=2, byrow=T)
View(X_new)
View(X_new)
round(t(apply(X_new, 1, classifier)), 2)
# create some new data and classify them - here 3 data points
X_new <- matrix(c(4.0,5.0), ncol=2, byrow=T)
round(t(apply(X_new, 1, classifier)), 2)
plot(data, col=c("red","blue")[classes], xlab="X1", ylab="X2", pch=19)
plot(data, col=c("red","blue")[3], xlab="X1", ylab="X2", pch=19)
View(data)
View(data)
plot(data, col=c("red","blue")[C], xlab="X1", ylab="X2", pch=19)
plot(data, col=c("red","blue")["C"], xlab="X1", ylab="X2", pch=19)
plot(data, col=c("red","blue")data[3], xlab="X1", ylab="X2", pch=19)
plot(data, col=c("red","blue")[data[3]], xlab="X1", ylab="X2", pch=19)
plot(data, col=c("red","blue")[data[3]], xlab="X1", ylab="X2", pch=19)
plot(data, col=c("red","blue")["C"], xlab="X1", ylab="X2", pch=19)
