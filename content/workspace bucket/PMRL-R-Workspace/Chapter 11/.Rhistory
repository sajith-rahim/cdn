sample(1:10)
1:10
sample(1:10)
sample(1:10)
sample(1:10)
1:10
hat_match <- function(n=10){
sample0 <- sample(1:n)
matches <- sample0(sample0 == 1:n)
return(matches)
}
hat_match(10)
hat_match <- function(n=10){
sample0 <- sample(1:n)
matches <- sample(sample0 == 1:n)
return(matches)
}
hat_match(10)
hat_match <- function(n=10){
sample0 <- sample(1:n)
matches <- sample[sample0 == 1:n]
return(matches)
}
hat_match(10)
hat_match <- function(n=10){
sample0 <- sample(1:n)
matches <- sample0[sample0 == 1:n]
return(matches)
}
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match <- function(n=10){
sample0 <- sample(1:n)
matches <- sample0[sample0 == 1:n].length
return(matches)
}
#HatProblem
sample(1:10)
hat_match <- function(n=10){
sample0 <- sample(1:n)
matches <- length(sample0[sample0 == 1:n])
return(matches)
}
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
#HatProblem
sample(1:10)
hat_match <- function(n=10){
sample0 <- sample(1:n)
matches <- length(sample0[sample0 == 1:n])
return(matches)
}
hat_match(10)
hat_match(10)
hat_match(10)
#HatProblem
#sample(1:10)
hat_match <- function(n=10){
sample0 <- sample(1:n)
#matches <- length(sample0[sample0 == 1:n])
matches <- sum(sample0 == 1:n)
return(matches)
}
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
hat_match(10)
replicate(1000,hat_match)
replicate(1000,hat_match())
table(replicate(1000,hat_match()))
#HatProblem
#sample(1:10)
hat_match <- function(n=10){
sample0 <- sample(1:n)
#matches <- length(sample0[sample0 == 1:n])
matches <- sum(sample0 == 1:n)
return(matches)
}
replicate(1000,hat_match())
hat_match_none <- function(n1=10,n2=10){
sample_none <- replicate(n1,hat_match(n2))
return(sum(sample_none == 0))
}
hat_match_none()
hat_match_none()
trials <- sapply(1:25,hat_match_none)
trials
trials <- sapply(1:25,hat_match_none,1000)
trials
trials <- sapply(1:25,hat_match_none,10000)
plot(1:25,trials)
trials <- sapply(1:21,hat_match_none,10000)
plot(1:21,trials)
hat_match_none(20)
hat_match_none <- function(n1=10,n2=10){
sample_none <- replicate(n2,hat_match(n1))
return(sum(sample_none == 0)/10000)
}
trials <- sapply(1:21,hat_match_none,10000)
plot(1:21,trials)
hat_match_none(20)
abline(hat_match_none(20))
abline(h=hat_match_none(20))
abline(h=hat_match_none(20))
abline(h=hat_match_none(20))
abline(h=hat_match_none(20))
abline(h=hat_match_none(20))
abline(h=hat_match_none(20))
abline(h=hat_match_none(20))
plot(1:21,trials)
abline(h=hat_match_none(20))
sample(rep(c(1:2),5))
rep(c(1:2),5)
rep(c(1:2),c(5,5)
)
sample(rep(c(1:2),c(5,5)))
hat_match_duo <- function(n=2){
sample0 <- sample(c(1,2),1:n)
#matches <- length(sample0[sample0 == 1:n])
matches <- sum(sample0 == 1:n)
return(matches)
}
sample(rep(c(1:2),1:5)
)
sample(rep(c(1:2),1:5))
sample(rep(c(1:2),1:2))
rep(c(1:2),c(10,10)
)
View(hat_match_duo)
View(hat_match_duo)
function(n=2){
sample0 <- sample(c(1,2),c(n,n))
#matches <- length(sample0[sample0 == c(n,n)])
matches <- sum(sample0 == c(n,n))
return(matches)
}
hat_match_duo <- function(n=2){
sample0 <- sample(c(1,2),c(n,n))
#matches <- length(sample0[sample0 == c(n,n)])
matches <- sum(sample0 == c(n,n))
return(matches)
}
hat_match_duo(3)
rep(1,3)
hat_match_duo <- function(n=2){
sample0 <- sample(c(rep(1,n),rep(2,n)))
#matches <- length(sample0[sample0 == c(n,n)])
matches <- sum(sample0 == c(n,n))
return(matches)
}
hat_match_duo(3)
hat_match_duo(3)
hat_match_duo(3)
hat_match_duo(3)
hat_match_duo(3)
hat_match_duo(3)
hat_match_duo(3)
hat_match_duo <- function(n=2){
sample0 <- sample(c(rep(1,n),rep(2,n)))
#matches <- length(sample0[sample0 == c(n,n)])
matches <- sum(sample0 == c(n,n))
return(matches)
}
c(rep(1,n),rep(2,n))
n=10
c(rep(1,n),rep(2,n))
hat_match_duo <- function(n=2){
sample0 <- sample(c(rep(1,n),rep(2,n)))
#matches <- length(sample0[sample0 == c(rep(1,n),rep(2,n))])
matches <- sum(sample0 == c(rep(1,n),rep(2,n)))
return(matches)
}
c(rep(1,n),rep(2,n))
matches <- replicate(1000,hat_match_duo())
matches
table(matches)
View(hat_match_duo)
sample(c(rep(1,n),rep(2,n)))
c(rep(1,n),rep(2,n))
sample0 == c(rep(1,n),rep(2,n))
sample(c(rep(1,n),rep(2,n))) == c(rep(1,n),rep(2,n))
n
matches <- replicate(1000,hat_match_duo(10))
table(matches)
matches <- replicate(1000,hat_match_duo(10))
table(matches)
matches <- replicate(1000,hat_match_duo(10))
table(matches)
331+254+87+6
mean(matches)
mean(matches >= 10)
hist(matches)
save.image("~/MonteCarloWorkSpace.RData")
install.packages("mclust")
library(mclust)
View(diabetes)
?BASE
??base
base(c)
compute_w <- function(X, Y, phi) {
Phi <- sapply(phi, function(base) base(X))  # make design matrix
solve(t(Phi) %*% Phi) %*% t(Phi) %*% Y      # find maximum likelihood
}
# some basis egs
one <- function(x) rep(1,length(x))
id  <- function(x) x
sq  <- function(x) x^2
x3  <- function(x) x^3
x4  <- function(x) x^4
And letâ€™s apply this to some egs. First to the standard linear regression:
# some data
X <- c(1,2,3,5,7)
Y <- c(3,5,6,12,21)
# basis for linear regression
phi <- c(one, id)
W <- compute_w(X, Y, phi)
W
# some basis egs
one <- function(x) rep(1,length(x))
id  <- function(x) x
sq  <- function(x) x^2
x3  <- function(x) x^3
x4  <- function(x) x^4
# some data
X <- c(1,2,3,5,7)
Y <- c(3,5,6,12,21)
# basis for linear regression
phi <- c(one, id)
W <- compute_w(X, Y, phi)
W
??points
m <- sapply(phi,function(base) base(xs))
xs     <- seq(min(X),max(X),len=50)
xs
m <- sapply(phi,function(base) base(xs))
m
source('~/PMRL-R-Workspace/Linear Basis Models.R')
source('~/PMRL-R-Workspace/Linear Basis Models.R')
source('~/PMRL-R-Workspace/Linear Basis Models.R')
source('~/PMRL-R-Workspace/Linear Basis Models.R')
source('~/PMRL-R-Workspace/Linear Basis Models.R')
source('~/PMRL-R-Workspace/Linear Basis Models.R')
source('~/PMRL-R-Workspace/Linear Basis Models.R')
# basis for quadratic regression
phi <- c(one, id, sq)
W <- compute_w(X, Y, phi)
plot(X,Y,pch=19)
draw_regression(X,W,phi)
draw_regression(X,W,phi)
phi <- c(one, id, function(x) sin(x))
W <- compute_w(X, Y, phi)
plot(X,Y,pch=19)
draw_regression(X,W,phi)
?plot
?abline
source('~/PMRL-R-Workspace/Linear Basis Models-Regularization.R')
source('~/PMRL-R-Workspace/Linear Basis Models-Regularization.R')
?plot
source('~/PMRL-R-Workspace/Linear Basis Models-Regularization.R')
source('~/PMRL-R-Workspace/Linear Basis Models-Regularization.R')
#----------------------------------------------------------
#----------------Linear Basis Models Sequential Learning---
source('~/PMRL-R-Workspace/Linear Basis Models-Sequential.R')
source('~/PMRL-R-Workspace/Linear Basis Models-Sequential.R')
source('~/PMRL-R-Workspace/Linear Basis Models-Sequential.R')
source('~/PMRL-R-Workspace/Chapter 11/Importance Sampling.R')
setwd("~/PMRL-R-Workspace/Chapter 11")
??min
min(1,.002,2)
#Monte Carlo Markov Chain
# cf. Rizzo - Statistical Computing with R (2007)
metropolis.hastings <- function(f,  # the target distribution
g,  # the proposal distribution
rg, # a sample from the proposal distribution
x0, # initial value for chain, in R it is x[1]
chain.size=1e5,  # chain size
burn.perc=0.1) { # burn in percentage
x <- c(x0, rep(NA,chain.size-1))  # initialize chain
for(i in 2:chain.size)   {
y <- rg(x[i-1])                 # generate Y from g(.|xt) using sampler rg
alpha <- min(1, f(y)*g(x[i-1],y)/(f(x[i-1])*g(y,x[i-1])))
x[i] <- x[i-1] + (y-x[i-1])*(runif(1)<alpha)  # update step
}
# remove initial part of the chain before output result
x[(burn.perc*chain.size) : chain.size]
}
a<-2.7; b<-6.3; size<-1e4
a<-2.7; b<-6.3; size<-1e4
f  <- function(x)   dbeta(x,a,b)
rg <- function(x)   runif(1,0,1)
g  <- function(x,y) 1 # i.e., dunif(x,0,1)
rg
??runif
X <- metropolis.hastings(f,g,rg,x0=runif(1,0,1),chain.size=size)
par(mfrow=c(1,2),mar=c(2,2,1,1))
hist(X,breaks=50,col="blue",main="Metropolis-Hastings",freq=FALSE)
curve(dbeta(x,a,b),col="sienna",lwd=2,add=TRUE)
hist(rbeta(size,a,b),breaks=50,col="grey",main="Direct Sampling",freq=FALSE)
curve(dbeta(x,a,b),col="sienna",lwd=2,add=TRUE)
a<-2.7; b<-6.3; size<-1e10
X <- metropolis.hastings(f,g,rg,x0=runif(1,0,1),chain.size=size)
a<-2.7; b<-6.3; size<-1e5
X <- metropolis.hastings(f,g,rg,x0=runif(1,0,1),chain.size=size)
par(mfrow=c(1,2),mar=c(2,2,1,1))
hist(X,breaks=50,col="blue",main="Metropolis-Hastings",freq=FALSE)
curve(dbeta(x,a,b),col="sienna",lwd=2,add=TRUE)
hist(rbeta(size,a,b),breaks=50,col="grey",main="Direct Sampling",freq=FALSE)
curve(dbeta(x,a,b),col="sienna",lwd=2,add=TRUE)
debugSource('~/PMRL-R-Workspace/Chapter 11/MCMC.R')
x
chain.size
y
rg
g
g(x[1],y)
g(err,y)
dunif(7,0,1)
dunif(.7,0,1)
alpha
f(y)*g(x[i-1],y)/(f(x[i-1])*g(y,x[i-1]))
x[2]
x[3]
x
x
rg
rg(123445)
??dnorm
clear
cls''
cls
g  <- function(x, y) dnorm(x,y,100) # sigma = 100 (!)
rg <- function(x)    rnorm(1,x,100)
g(1,3)
rnorm(1,)
runif(1)
runif(1) < 1
10*(runif(1) < 1)
10*(runif(1) < 1)
10*(runif(1) < 1)
10*(runif(1) < 1)
10*(runif(1) < .1)
